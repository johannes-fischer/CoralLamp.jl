using LinearAlgebra

snub_dode = [[-2.05022,-0.64303,0.175393],[2.05022,-0.64303,-0.175393],[-1.64507,0.64303,1.23608],[1.64507,0.64303,-1.23608],[-2.09275,0.330921,0.398127],[2.09275,0.330921,-0.398127],[-1.33296,1.64692,-0.398127],[1.33296,1.64692,0.398127],[-1.82527,-0.330921,1.09842],[1.82527,-0.330921,-1.09842],[-0.626047,1.74619,-1.09842],[0.626047,1.74619,1.09842],[-1.06222,1.45402,1.18539],[1.06222,1.45402,-1.18539],[-1.93214,0.84755,-0.442882],[1.93214,0.84755,0.442882],[-1.14487,-0.84755,1.6182],[1.14487,-0.84755,-1.6182],[-1.58199,-1.45402,-0.175393],[1.58199,-1.45402,0.175393],[-1.05741,0.374822,-1.84093],[1.05741,0.374822,1.84093],[-0.439138,-0.374822,-2.07709],[0.439138,-0.374822,2.07709],[-1.56241,-1.2495,0.803274],[1.56241,-1.2495,-0.803274],[-1.86331,-0.728335,-0.803274],[1.86331,-0.728335,0.803274],[-1.70007,1.2495,0.442882],[1.70007,1.2495,-0.442882],[-0.728114,-1.64692,1.18539],[0.728114,-1.64692,-1.18539],[-0.265655,-1.74619,-1.23608],[0.265655,-1.74619,1.23608],[-0.759791,-1.97784,-0.398127],[0.759791,-1.97784,0.398127],[-1.19922,-1.41527,-1.09842],[1.19922,-1.41527,1.09842],[-1.79033,0.192894,-1.18539],[1.79033,0.192894,1.18539],[-1.30644,-0.567715,-1.6182],[1.30644,-0.567715,1.6182],[-0.853311,0.728335,1.84093],[0.853311,0.728335,-1.84093],[-1.37941,1.10316,-1.23608],[1.37941,1.10316,1.23608],[-0.105036,0.567715,-2.07709],[0.105036,0.567715,2.07709],[-0.468228,2.09705,-0.175393],[0.468228,2.09705,0.175393],[-0.300897,1.97784,0.803274],[0.300897,1.97784,-0.803274],[-0.161563,1.41527,1.6182],[0.161563,1.41527,-1.6182],[-0.544174,-0.192894,2.07709],[0.544174,-0.192894,-2.07709],[-0.232068,-2.09705,0.442882],[0.232068,-2.09705,-0.442882],[-0.204101,-1.10316,1.84093],[0.204101,-1.10316,-1.84093]]
snub_dode = hcat(snub_dode...)

penta_hexe = [[0.,0.,-3.6322],[0.,0.,3.6322],[-2.42147,0.,-2.70728],[2.42147,0.,2.70728],[-3.74093,0.,-0.714455],[3.74093,0.,0.714455],[-2.31202,0.,3.02648],[2.31202,0.,-3.02648],[-2.97388,1.2495,-1.66963],[2.97388,1.2495,1.66963],[-3.20333,-1.64692,-0.468228],[3.20333,-1.64692,0.468228],[-2.89122,-0.64303,-2.10244],[2.89122,-0.64303,2.10244],[-3.33708,1.41527,0.232068],[3.33708,1.41527,-0.232068],[-3.47888,-0.374822,0.974575],[3.47888,-0.374822,-0.974575],[-0.175393,3.59762,0.468228],[0.175393,3.59762,-0.468228],[-2.70728,-2.09705,-1.21073],[-2.70728,2.09705,-1.21073],[2.70728,-2.09705,1.21073],[2.70728,2.09705,1.21073],[-2.46401,0.973951,-2.48455],[2.46401,0.973951,2.48455],[-3.24272,0.374822,1.59285],[3.24272,0.374822,-1.59285],[-3.02794,-1.95071,0.468228],[3.02794,-1.95071,-0.468228],[-2.89419,2.18236,-0.232068],[2.89419,2.18236,0.232068],[-3.16974,-1.29605,1.21073],[-3.16974,1.29605,1.21073],[3.16974,-1.29605,-1.21073],[3.16974,1.29605,-1.21073],[-2.54667,-1.58042,-2.05174],[2.54667,-1.58042,2.05174],[-0.753368,0.64303,3.49455],[0.753368,0.64303,-3.49455],[-0.442882,-3.59762,-0.232068],[0.442882,-3.59762,0.232068],[-0.40484,-3.20021,1.66963],[0.40484,-3.20021,-1.66963],[-1.10352,-1.2495,3.22706],[1.10352,-1.2495,-3.22706],[-0.462459,-3.3931,-1.21073],[-0.462459,3.3931,-1.21073],[0.462459,-3.3931,1.21073],[0.462459,3.3931,1.21073],[-0.530344,1.58042,3.22706],[0.530344,1.58042,-3.22706],[-0.388538,-2.62087,2.48455],[0.388538,-2.62087,-2.48455],[-2.64202,-1.41527,2.05174],[2.64202,-1.41527,-2.05174],[-0.0953548,2.99569,-2.05174],[0.0953548,2.99569,2.05174],[-2.06405,-2.82539,-0.974575],[2.06405,-2.82539,0.974575],[-2.07547,1.64692,2.48455],[2.07547,1.64692,-2.48455],[-0.180196,-0.973951,3.49455],[0.180196,-0.973951,-3.49455],[-0.888732,2.82539,2.10244],[0.888732,2.82539,-2.10244],[-2.56904,1.95071,1.66963],[2.56904,1.95071,-1.66963],[-1.21073,-2.09705,2.70728],[-1.21073,2.09705,2.70728],[1.21073,-2.09705,-2.70728],[1.21073,2.09705,-2.70728],[-1.29676,-2.99569,-1.59285],[1.29676,-2.99569,1.59285],[-1.94597,2.62087,-1.59285],[1.94597,2.62087,1.59285],[-1.41484,3.20021,-0.974575],[1.41484,3.20021,0.974575],[-1.63386,-0.330921,-3.22706],[1.63386,-0.330921,3.22706],[-2.00249,-2.18236,2.10244],[2.00249,-2.18236,-2.10244],[-0.933564,0.330921,-3.49455],[0.933564,0.330921,3.49455],[-1.87047,-3.23974,0.714455],[-1.87047,3.23974,0.714455],[1.87047,-3.23974,-0.714455],[1.87047,3.23974,-0.714455],[-1.15601,-2.00227,-3.02648],[-1.15601,2.00227,-3.02648],[1.15601,-2.00227,3.02648],[1.15601,2.00227,3.02648]]
penta_hexe = hcat(penta_hexe...)

# @show "Snub Dodecahedron"
# for v in snub_dode
#     @show norm(v)
# end
#
# @show "Pentagonal Hexecontahedron"
# for i = 1:size(penta_hexe)[2]
#     @show i, norm(penta_hexe[:,i])
# end

i2x(polyhedra,i) = polyhedra[:,i]
dist(polyhedra,i,j) = norm(polyhedra[:,i] - polyhedra[:,j])

i1 = 5
n_vertices = size(penta_hexe)[2]

pentagon = sort(1:n_vertices, by=i->dist(penta_hexe,i,i1))[2:6]
i2 = first(pentagon)
i5 = sort(pentagon, by=i->dist(penta_hexe,i,i2))[2]
i3,i4 = sort(1:n_vertices, by=i->dist(penta_hexe,i,i2) + dist(penta_hexe,i,i5))[3:4]
if dist(penta_hexe,i2,i3) > dist(penta_hexe,i2,i4)
    i3,i4 = i4,i3
end
# Vertices coordinates
v = [i2x(penta_hexe, i) for i in [i1,i2,i3,i4,i5]]
center = (v[2] + v[5])/2

# using Plots
# data = v[[1,2,5,2,3,4,5,1]]
# data = hcat(data..., center)
# p1=plot(data[1,:],data[2,:],data[3,:])
# display(p1)

### TEST before normalizing all vectors to sphere
for i in 1:length(v)
    ip1 = (i) % length(v) + 1
    ip2 = (i+1) % length(v) + 1
    angle = acos(dot(v[ip2]-v[ip1],v[i]-v[ip1]) / norm(v[ip2]-v[ip1])/norm(v[i]-v[ip1])) * 180 / pi
    @show i, ip1, ip2, angle
end
###

push!(v, center)
unnormalized = deepcopy(v)
normalize!.(v)

### TEST
@show norm.(diff(v))[2:4]
###

angle_tip_center = acos(dot(v[1], v[6]))
angle_side_center = acos(dot(v[2], v[6]))
angle_side_center2 = acos(dot(v[5], v[6]))
angle_bottom_center = acos(dot(v[3], v[6]))
angle_bottom_center2 = acos(dot(v[4], v[6]))

R = 0.3

l_tip = R * angle_tip_center #Distance from center to tip
l_side = R * angle_side_center #Distance from center to the side vertices, perpendicular to the center-tip line
l_bottom = R * angle_bottom_center #Distance from center to bottom vertices

### TEST
# Curved lines
angle_side_tip = acos(dot(v[2], v[1]))
l_side_tip = R * angle_side_tip
p,q = l_side_tip, sqrt(l_side^2 + l_tip^2)
@show p,q
# Flat lines
p,q = norm(v[1]-v[2]), sqrt(norm(v[1]-v[6])^2 + norm(v[6]-v[2])^2)
@show p,q
p,q = norm(unnormalized[1]-unnormalized[2]), sqrt(norm(unnormalized[1]-unnormalized[6])^2 + norm(unnormalized[6]-unnormalized[2])^2)
@show p,q
###

function sphere_angle(a,b,c,center=[0.0,0.0,0.0])
    n1 = cross(b - center, a - center)
    n2 = cross(b - center, c - center)
    normalize!(n1)
    normalize!(n2)
    acos(dot(n1,n2))
end

sphere_angle(v[1],center,v[2]) * 180 / pi
sphere_angle(v[5],center,v[2]) * 180 / pi
sphere_angle(v[5],center,v[1]) * 180 / pi
sphere_angle(v[2],center,v[3]) * 180 / pi
sphere_angle(v[3],center,v[4]) * 180 / pi
sphere_angle(v[4],center,v[5]) * 180 / pi

sphere_surface_area = 4 * pi * R^2
